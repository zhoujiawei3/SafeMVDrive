/* Copyright 2023 The Waymo Open Dataset Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

// Collection of messages to configure and store sim agents metrics.
syntax = "proto2";

package waymo.open_dataset;

// Configuration for the Sim Agents metrics.
message SimAgentMetricsConfig {
  // Each of the features used to evaluated sim-agents has one of the following
  // configs.
  message FeatureConfig {
    // To estimate the likelihood of the logged features under the
    // simulated distribution of features, an approximator of such distribution
    // is needed. For continuous values we support histogram-based and
    // kernel-density-based estimators.
    oneof estimator {
      HistogramEstimate histogram = 1;
      KernelDensityEstimate kernel_density = 2;
      BernoulliEstimate bernoulli = 3;
    }
    // Based on this flag, the distribution of simulated features will be
    // aggregated over time to approximate one single (per-scenario, per-object)
    // distribution instead of `N_STEP` per-step distributions.
    // Example: When using `independent_timesteps=False` for speed, each logged
    // step will be evaluated under the speed distribution of the 32 parallel
    // simulations at that specific step.
    // When `independent_timesteps=True`, each logged step will be evaluated
    // against the same distribution over all the steps (32 * 80 total samples).
    optional bool independent_timesteps = 4;
    // For each of the features, we extract a likelihood score in the range
    // [0,1]. The meta-metric (i.e. how all the submission are finally scored
    // and ranked) is just a weighted average of these scores.
    optional float metametric_weight = 5;
  }

  // Configuration for the histogram-based likelihood estimation.
  message HistogramEstimate {
    // Extremes on which the histogram is defined. The default configuration
    // provided for the challenge has these values carefully set based on
    // ground truth data. Any user submission exceeding these thresholds will be
    // clipped, resulting in lower score for the submission.
    optional float min_val = 1;
    optional float max_val = 2;
    // Number of bins for the histogram to be discretized into.
    optional int32 num_bins = 3;
    // Additive smoothing to apply to the histogram, to avoid infinite values
    // when 1+ bins are empty.
    optional float additive_smoothing_pseudocount = 4 [default = 0.001];
  }

  message KernelDensityEstimate {
    // Bandwidth for the Kernel Density estimation. For more details,
    // check sklearn documentation:
    // https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KernelDensity.html
    // This field needs to be set and needs to be strictly positive, otherwise
    // an error is raised at runtime.
    optional float bandwidth = 1;
  }

  // The Bernoulli estimator is used for boolean features, e.g. collision.
  message BernoulliEstimate {
    // Additive smoothing to apply to the underlying 2-bins histogram, to avoid
    // infinite values for empty bins.
    optional float additive_smoothing_pseudocount = 4 [default = 0.001];
  }

  // Dynamics features.
  optional FeatureConfig linear_speed = 1;
  optional FeatureConfig linear_acceleration = 2;
  optional FeatureConfig angular_speed = 3;
  optional FeatureConfig angular_acceleration = 4;

  // Interactive features.
  optional FeatureConfig distance_to_nearest_object = 5;
  optional FeatureConfig collision_indication = 6;
  optional FeatureConfig time_to_collision = 7;

  // Map-based features.
  optional FeatureConfig distance_to_road_edge = 8;
  optional FeatureConfig offroad_indication = 9;
}

// Aggregation (at the dataset-level or scenario-level) of the lower-level
// features into proper metrics.
message SimAgentMetrics {
  // If these metrics are at the scenario-level, specify the ID of the scenario
  // they relate to. If not specified, represent the aggregation at the
  // dataset level of the per-scenario metrics.
  optional string scenario_id = 1;

  // The meta-metric, i.e. the weighted aggregation of all the lower-level
  // features. This score is used to rank the submissions for the Sim Agents
  // challenge.
  optional float metametric = 2;

  // Average displacement error (average or minimum over simulations).
  optional float average_displacement_error = 3;
  optional float min_average_displacement_error = 13;

  // Dynamic features, i.e. speeds and accelerations.
  optional float linear_speed_likelihood = 4;
  optional float linear_acceleration_likelihood = 5;
  optional float angular_speed_likelihood = 6;
  optional float angular_acceleration_likelihood = 7;

  // Interactive features.
  optional float distance_to_nearest_object_likelihood = 8;
  optional float collision_indication_likelihood = 9;
  optional float time_to_collision_likelihood = 10;

  // Map-based features: distance to road edge, offroad indication.
  optional float distance_to_road_edge_likelihood = 11;
  optional float offroad_indication_likelihood = 12;

  // Fraction of simulated objects that collide for at least one step with any
  // other simulated object.
  optional float simulated_collision_rate = 14;
  // Fraction of simulated objects that drive offroad for at least one step.
  optional float simulated_offroad_rate = 15;
}

// Bucketed version of the sim agent metrics. This aggregated message is used
// in the challenge leaderboard to provide an easy to read but still informative
// metric output format.
// All the bucketed metrics are rescaled to be in the range [0, 1], but still
// according to the meta-metric weights defined in the metrics config.
message SimAgentsBucketedMetrics {
  // Realism meta-metric.
  optional float realism_meta_metric = 1;
  // Kinematic metrics: a linear combination of the kinematic-related
  // likelihoods, namely `linear_speed`, `linear_acceleration`, `angular_speed`
  // and `angular_acceleration`.
  optional float kinematic_metrics = 2;
  // Interactive metrics: a linear combination of the object-interaction
  // likelihoods, namely `distance_to_nearest_object`, `collision_indication`
  // and `time_to_collision`.
  optional float interactive_metrics = 5;
  // Map-based metrics: a linear combination of the map-related likelihoods,
  // namely `distance_to_road_edge` and `offroad_indication`.
  optional float map_based_metrics = 6;
  // MinADE.
  optional float min_ade = 7;
  // Fraction of simulated objects that collide for at least one step with any
  // other simulated object.
  optional float simulated_collision_rate = 8;
  // Fraction of simulated objects that drive offroad for at least one step.
  optional float simulated_offroad_rate = 9;
}
